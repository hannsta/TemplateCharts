{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\schro\\\\Documents\\\\TemplateReports\\\\YFIntegration\\\\frontend\\\\src\\\\Data.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, setState } from 'react';\nimport APIConfig from './APIConfig';\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Data(props) {\n  _s();\n\n  const [userData, setUserData] = useState('');\n  const [selectedOption, setSelectedOption] = useState('');\n  const [selectedConnection, setSelectedConnection] = useState('');\n  const [selectedName, setSelectedName] = useState('');\n  useEffect(() => {\n    fetch('get_user_data').then(response => response.json()).then(data => setUserData(data));\n  }, []);\n  let datasets = [];\n\n  if (userData) {\n    for (const dataset of userData) {\n      let dset = /*#__PURE__*/_jsxDEV(Datasource, {\n        dataset: dataset,\n        selectDataset: selectDataset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 24\n      }, this);\n\n      datasets.push(dset);\n    }\n  }\n\n  function selectDataset(sourceid) {\n    for (var data of userData) {\n      if (data.sourceid == sourceid) {\n        if (data.type == 'API') {\n          fetch('get_connection?sourceid=' + sourceid).then(response => response.json()).then(respdata => {\n            setSelectedConnection(respdata[0].fields);\n            setSelectedOption('API');\n            setSelectedName(data.name);\n          });\n        }\n      }\n    }\n  }\n\n  function csvFile(e) {\n    e.preventDefault();\n    const input = document.getElementById(\"csvFile\").files[0];\n    var fileName = document.getElementById(\"csvFile\").value.split('/').pop().split('\\\\').pop();\n    const reader = new FileReader();\n    const delimiter = \",\";\n\n    reader.onload = function (e) {\n      let rawCSV = e.target.result;\n      var csrftoken = Cookies.get('csrftoken');\n      const requestOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': csrftoken\n        },\n        body: JSON.stringify({\n          name: fileName,\n          data: rawCSV\n        })\n      };\n      fetch('upload_data', requestOptions).then(response => {\n        if (response.ok) {\n          console.log(\"success!!\");\n        } else {\n          console.log(\"failed\");\n        }\n      });\n    };\n\n    reader.readAsText(input);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"datasetPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"datasetMenu\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"leftHeader\",\n        children: \"Create A New Source\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"newSourceContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"newSource\",\n          onClick: e => setSelectedOption('FILE'),\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"csvFile\",\n            className: \"custom-file-upload\",\n            children: \"Upload a CSV File\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"newSource\",\n          onClick: e => setSelectedOption('API'),\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"csvFile\",\n            className: \"custom-file-upload disabled\",\n            children: \"Connect to API\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"newSource\",\n          onClick: e => setSelectedOption('FILE'),\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"csvFile\",\n            className: \"custom-file-upload disabled\",\n            children: \"SQL Query\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contentCol\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"leftHeader\",\n          children: \"Data Sources\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contentCol\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"datasetList\",\n            children: datasets\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dataSourceConfigContainer\",\n      children: [selectedOption == 'FILE' && /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"csvFile\",\n        onChange: csvFile,\n        accept: \".csv\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), selectedOption == 'API' && /*#__PURE__*/_jsxDEV(APIConfig, {\n        connName: connName,\n        selectedConnection: selectedConnection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Data, \"Ttg+5abgrBDkwf45Xp6dwthDHWk=\");\n\n_c = Data;\nexport default Data;\n\nfunction Datasource(props) {\n  const {\n    dataset,\n    selectDataset\n  } = props;\n\n  function getDataSet(e) {\n    console.log(e.target);\n    selectDataset(e.target.getAttribute(\"uuid\"));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"datasetContainer\",\n    uuid: dataset.sourceid,\n    onClick: getDataSet,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"datasetName\",\n      uuid: dataset.sourceid,\n      children: dataset.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"datasetType\",\n      uuid: dataset.sourceid,\n      children: dataset.type\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = Datasource;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Data\");\n$RefreshReg$(_c2, \"Datasource\");","map":{"version":3,"sources":["C:/Users/schro/Documents/TemplateReports/YFIntegration/frontend/src/Data.js"],"names":["React","useState","useEffect","setState","APIConfig","Cookies","Data","props","userData","setUserData","selectedOption","setSelectedOption","selectedConnection","setSelectedConnection","selectedName","setSelectedName","fetch","then","response","json","data","datasets","dataset","dset","selectDataset","push","sourceid","type","respdata","fields","name","csvFile","e","preventDefault","input","document","getElementById","files","fileName","value","split","pop","reader","FileReader","delimiter","onload","rawCSV","target","result","csrftoken","get","requestOptions","method","headers","body","JSON","stringify","ok","console","log","readAsText","connName","Datasource","getDataSet","getAttribute"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, setState } from 'react';\r\nimport APIConfig from './APIConfig'\r\n\r\nimport Cookies from 'js-cookie'\r\nfunction Data(props){\r\n    const [userData, setUserData] = useState('')\r\n    const [selectedOption, setSelectedOption] = useState('')\r\n    const [selectedConnection, setSelectedConnection] = useState('')\r\n    const [selectedName, setSelectedName] = useState('')\r\n\r\n    useEffect(() => {\r\n        fetch('get_user_data')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => setUserData(data))\r\n    }, [])\r\n    let datasets = []\r\n    if (userData){\r\n        for (const dataset of userData){\r\n            let dset = <Datasource dataset={dataset} selectDataset={selectDataset}/>\r\n            datasets.push(dset)\r\n        }\r\n    }\r\n    function selectDataset(sourceid){\r\n        for (var data of userData){\r\n            if (data.sourceid == sourceid){\r\n                if (data.type == 'API'){\r\n                    fetch('get_connection?sourceid='+sourceid)\r\n                    .then(response => response.json())\r\n                    .then(respdata => {\r\n                        setSelectedConnection(respdata[0].fields)\r\n                        setSelectedOption('API')\r\n                        setSelectedName(data.name)\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n    function csvFile(e) {\r\n        e.preventDefault();\r\n        const input = document.getElementById(\"csvFile\").files[0];\r\n        var fileName = document.getElementById(\"csvFile\").value.split('/').pop().split('\\\\').pop();\r\n        const reader = new FileReader();\r\n        const delimiter = \",\";\r\n        reader.onload = function (e) {\r\n           let rawCSV = e.target.result;\r\n           var csrftoken = Cookies.get('csrftoken');\r\n           const requestOptions = {\r\n             method: 'POST',\r\n             headers: { 'Content-Type': 'application/json','X-CSRFToken': csrftoken },\r\n             body: JSON.stringify({name:fileName, data: rawCSV})\r\n           };\r\n           fetch('upload_data', requestOptions)\r\n               .then(response => {\r\n                 if (response.ok){\r\n                   console.log(\"success!!\")\r\n                 }else{\r\n                   console.log(\"failed\")\r\n                 }\r\n               })            \r\n        }\r\n        reader.readAsText(input);\r\n      };\r\n    return(\r\n        <div className=\"datasetPage\">\r\n            <div className=\"datasetMenu\">        \r\n                <div className=\"leftHeader\">Create A New Source</div>\r\n                <div className=\"newSourceContainer\">\r\n                    <div className=\"newSource\" onClick={e => setSelectedOption('FILE')}>\r\n                        <label htmlFor=\"csvFile\" className=\"custom-file-upload\">\r\n                        Upload a CSV File\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"newSource\" onClick={e => setSelectedOption('API')}>\r\n                        <label htmlFor=\"csvFile\" className=\"custom-file-upload disabled\">\r\n                        Connect to API\r\n                        </label> \r\n                    </div>\r\n                    <div className=\"newSource\" onClick={e => setSelectedOption('FILE')}>\r\n                        <label htmlFor=\"csvFile\" className=\"custom-file-upload disabled\">\r\n                        SQL Query\r\n                        </label> \r\n                    </div>\r\n                </div>\r\n                <div className=\"contentCol\">\r\n                    <div className=\"leftHeader\">Data Sources</div>\r\n                    <div className=\"contentCol\">\r\n                        <div className=\"datasetList\">\r\n                        {datasets}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"dataSourceConfigContainer\">\r\n                {selectedOption == 'FILE' && (\r\n                    <input type=\"file\" id=\"csvFile\" onChange={csvFile} accept=\".csv\" />\r\n                )}\r\n                {selectedOption == 'API' && (\r\n                    <APIConfig connName={connName} selectedConnection={selectedConnection} />\r\n                )}\r\n            </div>\r\n        </div>\r\n      )\r\n  \r\n    \r\n\r\n  }\r\n  export default Data;\r\n\r\n  function Datasource(props){\r\n    const {\r\n        dataset,\r\n        selectDataset\r\n    } = props;\r\n    function getDataSet(e){\r\n        console.log(e.target)\r\n        selectDataset(e.target.getAttribute(\"uuid\"))\r\n    }\r\n    return(\r\n        <div className=\"datasetContainer\" uuid={dataset.sourceid} onClick={getDataSet}>\r\n            <div className=\"datasetName\"  uuid={dataset.sourceid}>\r\n                {dataset.name}\r\n            </div>\r\n            <div className=\"datasetType\" uuid={dataset.sourceid}>\r\n                {dataset.type}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n  }"]},"metadata":{},"sourceType":"module"}