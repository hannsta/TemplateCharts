{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\schro\\\\Documents\\\\TemplateReports\\\\YFIntegration\\\\frontend\\\\src\\\\APIConfig.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, setState } from 'react';\nimport Cookies from 'js-cookie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction APIConfig(props) {\n  _s();\n\n  const [connectionName, setConnectionName] = useState('');\n  const [URL, setURL] = useState('');\n  const [URLParameters, setURLParameters] = useState('');\n  const [paramKey, setParamKey] = useState('');\n  const [sourceId, setSourceId] = useState('');\n  const [connectionId, setConnectionId] = useState('');\n  const {\n    selectedConnection,\n    connName\n  } = props;\n  console.log(\"set selected\", selectedConnection);\n\n  if (selectedConnection) {\n    setConnectionName(connName);\n    setURL(selectedConnection.url);\n    setURLParameters(selectedConnection.parameters);\n    setSourceId(selectedConnection.sourceid);\n    setConnectionId(selectedConnection.connectionid);\n  }\n\n  useEffect(() => {}, []);\n\n  function saveURLParameter(idx, type, value) {\n    var paramCopy = URLParameters;\n    console.log(\"paramUpdate\", idx, type, value);\n\n    if (type == 'val') {\n      paramCopy[idx].value = value;\n    } else {\n      paramCopy[idx].key = value;\n    }\n\n    setURLParameters(paramCopy);\n  }\n\n  function addParameter() {\n    var paramCopy = URLParameters;\n\n    if (!paramCopy) {\n      paramCopy = [];\n    }\n\n    paramCopy.push({\n      'idx': paramCopy.length,\n      'key': '',\n      'value': ''\n    });\n    setURLParameters(paramCopy);\n    setParamKey(new Date());\n  }\n\n  function saveAPIConnection() {\n    var csrftoken = Cookies.get('csrftoken');\n    var body = JSON.stringify({\n      'name': connectionName,\n      'url': URL,\n      'parameters': URLParameters,\n      'sourceid': sourceId,\n      'connectionid': connectionId\n    });\n    fetch('save_connection', {\n      method: 'POST',\n      credentials: 'include',\n      mode: 'same-origin',\n      headers: {\n        'Accept': 'application/json',\n        'X-CSRFToken': csrftoken\n      },\n      body: body\n    }).then(response => response.text()).then(data => {\n      var resp = JSON.parse(data);\n      setSourceId(resp.sourceid);\n      setConnectionId(resp.connectionid);\n    });\n  }\n\n  var urlParams = [];\n\n  for (var i = 0; i < URLParameters.length; i++) {\n    var param = URLParameters[0];\n    urlParams.push( /*#__PURE__*/_jsxDEV(URLParameter, {\n      saveURLParameter: saveURLParameter,\n      idx: param.idx,\n      defaultValue: param.value,\n      defaultParam: param.key\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contentCol\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Connection Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: connectionName,\n      onChange: e => setConnectionName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Endpoint URL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: URL,\n      onChange: e => setURL(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Endpoint Parameters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: addParameter,\n      children: \"Add Parameter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), urlParams, /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: saveAPIConnection,\n      children: \"Save Connection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n\n_s(APIConfig, \"YuQlScTuc5SQRXFF2Ihmd99iOkw=\");\n\n_c = APIConfig;\n\nfunction URLParameter(props) {\n  _s2();\n\n  const [parameter, setParameter] = useState('');\n  const [value, setValue] = useState('');\n  const {\n    saveURLParameter,\n    idx,\n    defaultValue,\n    defaultParam\n  } = props;\n\n  function setParam(e) {\n    saveURLParameter(idx, 'param', e.target.value);\n    setParameter(e.target.value);\n  }\n\n  function setVal(e) {\n    saveURLParameter(idx, 'val', e.target.value);\n    setValue(e.target.value);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: parameter,\n      onChange: setParam\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: value,\n      onChange: setVal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(URLParameter, \"giUKcOyFNpdw3tpF3CcHvxncYks=\");\n\n_c2 = URLParameter;\nexport default APIConfig;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"APIConfig\");\n$RefreshReg$(_c2, \"URLParameter\");","map":{"version":3,"sources":["C:/Users/schro/Documents/TemplateReports/YFIntegration/frontend/src/APIConfig.js"],"names":["React","useState","useEffect","setState","Cookies","APIConfig","props","connectionName","setConnectionName","URL","setURL","URLParameters","setURLParameters","paramKey","setParamKey","sourceId","setSourceId","connectionId","setConnectionId","selectedConnection","connName","console","log","url","parameters","sourceid","connectionid","saveURLParameter","idx","type","value","paramCopy","key","addParameter","push","length","Date","saveAPIConnection","csrftoken","get","body","JSON","stringify","fetch","method","credentials","mode","headers","then","response","text","data","resp","parse","urlParams","i","param","e","target","URLParameter","parameter","setParameter","setValue","defaultValue","defaultParam","setParam","setVal"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, setState } from 'react';\r\nimport Cookies from 'js-cookie';\r\n\r\nfunction APIConfig(props){\r\n    const [connectionName, setConnectionName] = useState('')\r\n    const [URL, setURL] = useState('')\r\n    const [URLParameters, setURLParameters] = useState('')\r\n    const [paramKey, setParamKey] = useState('')\r\n    const [sourceId, setSourceId] = useState('')\r\n    const [connectionId, setConnectionId] = useState('')\r\n\r\n    const {\r\n        selectedConnection,\r\n        connName\r\n    } = props\r\n    console.log(\"set selected\", selectedConnection) \r\n\r\n    if (selectedConnection){\r\n        setConnectionName(connName)\r\n        setURL(selectedConnection.url)\r\n        setURLParameters(selectedConnection.parameters)\r\n        setSourceId(selectedConnection.sourceid)\r\n        setConnectionId(selectedConnection.connectionid)      \r\n    }\r\n    useEffect(() => {\r\n\r\n    }, [])\r\n    function saveURLParameter(idx, type, value){\r\n        var paramCopy = URLParameters\r\n        console.log(\"paramUpdate\",idx, type, value)\r\n        if (type=='val'){\r\n            paramCopy[idx].value = value\r\n        }else{\r\n            paramCopy[idx].key = value\r\n        }\r\n        setURLParameters(paramCopy)\r\n    }\r\n    function addParameter(){\r\n        var paramCopy = URLParameters\r\n        if (!paramCopy){\r\n            paramCopy=[]\r\n        }\r\n        paramCopy.push({'idx':paramCopy.length,'key':'','value':''})\r\n        setURLParameters(paramCopy)\r\n        setParamKey(new Date())\r\n    }\r\n    function saveAPIConnection(){\r\n        var csrftoken = Cookies.get('csrftoken');\r\n        var body = JSON.stringify({\r\n          'name':connectionName,\r\n          'url':URL,\r\n          'parameters': URLParameters,\r\n          'sourceid':sourceId,\r\n          'connectionid':connectionId\r\n        })\r\n        fetch('save_connection', {\r\n          method: 'POST',\r\n          credentials: 'include',\r\n          mode: 'same-origin',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'X-CSRFToken':csrftoken\r\n          },\r\n          body: body\r\n        }).then(response => response.text())\r\n        .then(data => {\r\n            var resp = JSON.parse(data)\r\n            setSourceId(resp.sourceid)\r\n            setConnectionId(resp.connectionid)\r\n        })\r\n             \r\n    }\r\n    var urlParams = []\r\n    for (var i=0; i < URLParameters.length; i++){\r\n        var param = URLParameters[0]\r\n        urlParams.push(\r\n            <URLParameter saveURLParameter={saveURLParameter} idx={param.idx} defaultValue={param.value} defaultParam={param.key} />\r\n        )\r\n    }\r\n    return(\r\n        <div className=\"contentCol\">\r\n            <div>Connection Name</div>\r\n            <input type=\"text\" value={connectionName} onChange={e => setConnectionName(e.target.value)}></input>\r\n            <div>Endpoint URL</div>\r\n            <input type=\"text\" value={URL} onChange={e => setURL(e.target.value)}></input>\r\n            <div>Endpoint Parameters</div>\r\n            <div onClick={addParameter}>Add Parameter</div>\r\n            {urlParams}\r\n            <div onClick={saveAPIConnection}>Save Connection</div>\r\n        </div>\r\n    )\r\n  }\r\n\r\n  function URLParameter(props){\r\n    const [parameter, setParameter] = useState('')\r\n    const [value, setValue] = useState('')\r\n    const {\r\n        saveURLParameter,\r\n        idx,\r\n        defaultValue,\r\n        defaultParam\r\n        \r\n    } = props\r\n    function setParam(e){\r\n        saveURLParameter(idx, 'param', e.target.value)\r\n        setParameter(e.target.value)\r\n    }\r\n    function setVal(e){\r\n        saveURLParameter(idx, 'val', e.target.value)\r\n        setValue(e.target.value)\r\n    }  \r\n    return(\r\n        <div>\r\n            <input type=\"text\" value={parameter} onChange={setParam}></input>\r\n            <input type=\"text\" value={value} onChange={setVal}></input>\r\n        </div>\r\n    )\r\n  }  \r\n  export default APIConfig;"]},"metadata":{},"sourceType":"module"}