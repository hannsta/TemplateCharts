{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\schro\\\\Documents\\\\TemplateReports\\\\YFIntegration\\\\frontend\\\\src\\\\WidgetList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, setState } from 'react';\nimport Editor from './Editor';\nimport Configuration from './Helpers';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes, faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WidgetList(props) {\n  _s();\n\n  const {\n    loadWidget\n  } = props;\n  const [widgets, setWidgets] = useState('');\n  useEffect(() => {\n    fetch('get_widgets').then(response => response.text()).then(data => setWidgets(JSON.parse(data)));\n  }, []);\n\n  function selectWidget(e) {\n    loadWidget(e.target.getAttribute(\"uuid\"));\n  }\n\n  var widgetObj = [];\n\n  if (widgets) {\n    for (var widget of widgets) {\n      templateObj.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: selectWidget,\n        className: \"widgetIcon\",\n        uuid: template[1],\n        children: template[0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 30\n      }, this));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"widgetList\",\n    children: widgetObj\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(WidgetList, \"qrvJhurpa4Ciit44Q0VRlTTT+4Y=\");\n\n_c = WidgetList;\nexport default TemplateList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WidgetList\");","map":{"version":3,"sources":["C:/Users/schro/Documents/TemplateReports/YFIntegration/frontend/src/WidgetList.js"],"names":["React","useState","useEffect","setState","Editor","Configuration","FontAwesomeIcon","faTimes","faCheck","ToastContainer","toast","WidgetList","props","loadWidget","widgets","setWidgets","fetch","then","response","text","data","JSON","parse","selectWidget","e","target","getAttribute","widgetObj","widget","templateObj","push","template","TemplateList"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,aAAP,MAA0B,WAA1B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,mCAAjC;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACvB,QAAM;AACFC,IAAAA;AADE,MAEFD,KAFJ;AAGA,QAAM,CAACE,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,EAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,KAAK,CAAC,aAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAIL,UAAU,CAACM,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAD,CAFxB;AAGD,GAJM,EAIJ,EAJI,CAAT;;AAKA,WAASG,YAAT,CAAsBC,CAAtB,EAAwB;AACpBX,IAAAA,UAAU,CAACW,CAAC,CAACC,MAAF,CAASC,YAAT,CAAsB,MAAtB,CAAD,CAAV;AACH;;AACD,MAAIC,SAAS,GAAG,EAAhB;;AACA,MAAIb,OAAJ,EAAY;AACR,SAAK,IAAIc,MAAT,IAAmBd,OAAnB,EAA2B;AACvBe,MAAAA,WAAW,CAACC,IAAZ,eAAiB;AAAK,QAAA,OAAO,EAAEP,YAAd;AAA4B,QAAA,SAAS,EAAC,YAAtC;AAAmD,QAAA,IAAI,EAAEQ,QAAQ,CAAC,CAAD,CAAjE;AAAA,kBAAuEA,QAAQ,CAAC,CAAD;AAA/E;AAAA;AAAA;AAAA;AAAA,cAAjB;AACH;AACJ;;AACD,sBACA;AAAK,IAAA,EAAE,EAAC,YAAR;AAAA,cACKJ;AADL;AAAA;AAAA;AAAA;AAAA,UADA;AAKH;;GAzBQhB,U;;KAAAA,U;AA6BT,eAAeqB,YAAf","sourcesContent":["import React, { useState, useEffect, setState } from 'react';\r\nimport Editor from './Editor'\r\nimport Configuration from './Helpers'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes, faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction WidgetList(props) {\r\n    const {\r\n        loadWidget\r\n    } = props\r\n    const [widgets, setWidgets] = useState('')\r\n\r\n    useEffect(() => {\r\n        fetch('get_widgets')\r\n        .then(response => response.text())\r\n        .then(data => setWidgets(JSON.parse(data)))\r\n      }, []);\r\n    function selectWidget(e){\r\n        loadWidget(e.target.getAttribute(\"uuid\"))\r\n    }\r\n    var widgetObj = []\r\n    if (widgets){\r\n        for (var widget of widgets){\r\n            templateObj.push(<div onClick={selectWidget} className=\"widgetIcon\" uuid={template[1]}>{template[0]}</div>)\r\n        }\r\n    }\r\n    return (\r\n    <div id=\"widgetList\">\r\n        {widgetObj}\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default TemplateList;\r\n"]},"metadata":{},"sourceType":"module"}